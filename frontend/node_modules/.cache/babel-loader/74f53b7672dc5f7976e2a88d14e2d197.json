{"ast":null,"code":"/*\n * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\n * in FIPS 180-1\n * Version 2.2 Copyright Paul Johnston 2000 - 2009.\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for details.\n */\n\n/*\n * Configurable variables. You may need to tweak these to be compatible with\n * the server-side, but the defaults work in most cases.\n */\nvar hexcase = 1;\n/* hex output format. 0 - lowercase; 1 - uppercase        */\n\nvar b64pad = \"=\";\n/* base-64 pad character. \"=\" for strict RFC compliance   */\n\n/*\n * These are the functions you'll usually want to call\n * They take string arguments and return either hex or base-64 encoded strings\n */\n\nfunction hex_sha1(s) {\n  return rstr2hex(rstr_sha1(str2rstr_utf8(s)));\n}\n\nfunction b64_sha1(s) {\n  return rstr2b64(rstr_sha1(str2rstr_utf8(s)));\n}\n\nfunction any_sha1(s, e) {\n  return rstr2any(rstr_sha1(str2rstr_utf8(s)), e);\n}\n\nfunction hex_hmac_sha1(k, d) {\n  return rstr2hex(rstr_hmac_sha1(str2rstr_utf8(k), str2rstr_utf8(d)));\n}\n\nfunction b64_hmac_sha1(k, d) {\n  return rstr2b64(rstr_hmac_sha1(str2rstr_utf8(k), str2rstr_utf8(d)));\n}\n\nfunction any_hmac_sha1(k, d, e) {\n  return rstr2any(rstr_hmac_sha1(str2rstr_utf8(k), str2rstr_utf8(d)), e);\n}\n/*\n * Perform a simple self-test to see if the VM is working\n */\n\n\nfunction sha1_vm_test() {\n  return hex_sha1(\"abc\").toLowerCase() == \"a9993e364706816aba3e25717850c26c9cd0d89d\";\n}\n/*\n * Calculate the SHA1 of a raw string\n */\n\n\nfunction rstr_sha1(s) {\n  return binb2rstr(binb_sha1(rstr2binb(s), s.length * 8));\n}\n/*\n * Calculate the HMAC-SHA1 of a key and some data (raw strings)\n */\n\n\nfunction rstr_hmac_sha1(key, data) {\n  var bkey = rstr2binb(key);\n  if (bkey.length > 16) bkey = binb_sha1(bkey, key.length * 8);\n  var ipad = Array(16),\n      opad = Array(16);\n\n  for (var i = 0; i < 16; i++) {\n    ipad[i] = bkey[i] ^ 0x36363636;\n    opad[i] = bkey[i] ^ 0x5C5C5C5C;\n  }\n\n  var hash = binb_sha1(ipad.concat(rstr2binb(data)), 512 + data.length * 8);\n  return binb2rstr(binb_sha1(opad.concat(hash), 512 + 160));\n}\n/*\n * Convert a raw string to a hex string\n */\n\n\nfunction rstr2hex(input) {\n  try {\n    hexcase;\n  } catch (e) {\n    hexcase = 0;\n  }\n\n  var hex_tab = hexcase ? \"0123456789ABCDEF\" : \"0123456789abcdef\";\n  var output = \"\";\n  var x;\n\n  for (var i = 0; i < input.length; i++) {\n    x = input.charCodeAt(i);\n    output += hex_tab.charAt(x >>> 4 & 0x0F) + hex_tab.charAt(x & 0x0F);\n  }\n\n  return output;\n}\n/*\n * Convert a raw string to a base-64 string\n */\n\n\nfunction rstr2b64(input) {\n  try {\n    b64pad;\n  } catch (e) {\n    b64pad = '';\n  }\n\n  var tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n  var output = \"\";\n  var len = input.length;\n\n  for (var i = 0; i < len; i += 3) {\n    var triplet = input.charCodeAt(i) << 16 | (i + 1 < len ? input.charCodeAt(i + 1) << 8 : 0) | (i + 2 < len ? input.charCodeAt(i + 2) : 0);\n\n    for (var j = 0; j < 4; j++) {\n      if (i * 8 + j * 6 > input.length * 8) output += b64pad;else output += tab.charAt(triplet >>> 6 * (3 - j) & 0x3F);\n    }\n  }\n\n  return output;\n}\n/*\n * Convert a raw string to an arbitrary string encoding\n */\n\n\nfunction rstr2any(input, encoding) {\n  var divisor = encoding.length;\n  var remainders = Array();\n  var i, q, x, quotient;\n  /* Convert to an array of 16-bit big-endian values, forming the dividend */\n\n  var dividend = Array(Math.ceil(input.length / 2));\n\n  for (i = 0; i < dividend.length; i++) {\n    dividend[i] = input.charCodeAt(i * 2) << 8 | input.charCodeAt(i * 2 + 1);\n  }\n  /*\n   * Repeatedly perform a long division. The binary array forms the dividend,\n   * the length of the encoding is the divisor. Once computed, the quotient\n   * forms the dividend for the next step. We stop when the dividend is zero.\n   * All remainders are stored for later use.\n   */\n\n\n  while (dividend.length > 0) {\n    quotient = Array();\n    x = 0;\n\n    for (i = 0; i < dividend.length; i++) {\n      x = (x << 16) + dividend[i];\n      q = Math.floor(x / divisor);\n      x -= q * divisor;\n      if (quotient.length > 0 || q > 0) quotient[quotient.length] = q;\n    }\n\n    remainders[remainders.length] = x;\n    dividend = quotient;\n  }\n  /* Convert the remainders to the output string */\n\n\n  var output = \"\";\n\n  for (i = remainders.length - 1; i >= 0; i--) {\n    output += encoding.charAt(remainders[i]);\n  }\n  /* Append leading zero equivalents */\n\n\n  var full_length = Math.ceil(input.length * 8 / (Math.log(encoding.length) / Math.log(2)));\n\n  for (i = output.length; i < full_length; i++) {\n    output = encoding[0] + output;\n  }\n\n  return output;\n}\n/*\n * Encode a string as utf-8.\n * For efficiency, this assumes the input is valid utf-16.\n */\n\n\nfunction str2rstr_utf8(input) {\n  var output = \"\";\n  var i = -1;\n  var x, y;\n\n  while (++i < input.length) {\n    /* Decode utf-16 surrogate pairs */\n    x = input.charCodeAt(i);\n    y = i + 1 < input.length ? input.charCodeAt(i + 1) : 0;\n\n    if (0xD800 <= x && x <= 0xDBFF && 0xDC00 <= y && y <= 0xDFFF) {\n      x = 0x10000 + ((x & 0x03FF) << 10) + (y & 0x03FF);\n      i++;\n    }\n    /* Encode output as utf-8 */\n\n\n    if (x <= 0x7F) output += String.fromCharCode(x);else if (x <= 0x7FF) output += String.fromCharCode(0xC0 | x >>> 6 & 0x1F, 0x80 | x & 0x3F);else if (x <= 0xFFFF) output += String.fromCharCode(0xE0 | x >>> 12 & 0x0F, 0x80 | x >>> 6 & 0x3F, 0x80 | x & 0x3F);else if (x <= 0x1FFFFF) output += String.fromCharCode(0xF0 | x >>> 18 & 0x07, 0x80 | x >>> 12 & 0x3F, 0x80 | x >>> 6 & 0x3F, 0x80 | x & 0x3F);\n  }\n\n  return output;\n}\n/*\n * Encode a string as utf-16\n */\n\n\nfunction str2rstr_utf16le(input) {\n  var output = \"\";\n\n  for (var i = 0; i < input.length; i++) {\n    output += String.fromCharCode(input.charCodeAt(i) & 0xFF, input.charCodeAt(i) >>> 8 & 0xFF);\n  }\n\n  return output;\n}\n\nfunction str2rstr_utf16be(input) {\n  var output = \"\";\n\n  for (var i = 0; i < input.length; i++) {\n    output += String.fromCharCode(input.charCodeAt(i) >>> 8 & 0xFF, input.charCodeAt(i) & 0xFF);\n  }\n\n  return output;\n}\n/*\n * Convert a raw string to an array of big-endian words\n * Characters >255 have their high-byte silently ignored.\n */\n\n\nfunction rstr2binb(input) {\n  var output = Array(input.length >> 2);\n\n  for (var i = 0; i < output.length; i++) {\n    output[i] = 0;\n  }\n\n  for (var i = 0; i < input.length * 8; i += 8) {\n    output[i >> 5] |= (input.charCodeAt(i / 8) & 0xFF) << 24 - i % 32;\n  }\n\n  return output;\n}\n/*\n * Convert an array of big-endian words to a string\n */\n\n\nfunction binb2rstr(input) {\n  var output = \"\";\n\n  for (var i = 0; i < input.length * 32; i += 8) {\n    output += String.fromCharCode(input[i >> 5] >>> 24 - i % 32 & 0xFF);\n  }\n\n  return output;\n}\n/*\n * Calculate the SHA-1 of an array of big-endian words, and a bit length\n */\n\n\nfunction binb_sha1(x, len) {\n  /* append padding */\n  x[len >> 5] |= 0x80 << 24 - len % 32;\n  x[(len + 64 >> 9 << 4) + 15] = len;\n  var w = Array(80);\n  var a = 1732584193;\n  var b = -271733879;\n  var c = -1732584194;\n  var d = 271733878;\n  var e = -1009589776;\n\n  for (var i = 0; i < x.length; i += 16) {\n    var olda = a;\n    var oldb = b;\n    var oldc = c;\n    var oldd = d;\n    var olde = e;\n\n    for (var j = 0; j < 80; j++) {\n      if (j < 16) w[j] = x[i + j];else w[j] = bit_rol(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);\n      var t = safe_add(safe_add(bit_rol(a, 5), sha1_ft(j, b, c, d)), safe_add(safe_add(e, w[j]), sha1_kt(j)));\n      e = d;\n      d = c;\n      c = bit_rol(b, 30);\n      b = a;\n      a = t;\n    }\n\n    a = safe_add(a, olda);\n    b = safe_add(b, oldb);\n    c = safe_add(c, oldc);\n    d = safe_add(d, oldd);\n    e = safe_add(e, olde);\n  }\n\n  return Array(a, b, c, d, e);\n}\n/*\n * Perform the appropriate triplet combination function for the current\n * iteration\n */\n\n\nfunction sha1_ft(t, b, c, d) {\n  if (t < 20) return b & c | ~b & d;\n  if (t < 40) return b ^ c ^ d;\n  if (t < 60) return b & c | b & d | c & d;\n  return b ^ c ^ d;\n}\n/*\n * Determine the appropriate additive constant for the current iteration\n */\n\n\nfunction sha1_kt(t) {\n  return t < 20 ? 1518500249 : t < 40 ? 1859775393 : t < 60 ? -1894007588 : -899497514;\n}\n/*\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n * to work around bugs in some JS interpreters.\n */\n\n\nfunction safe_add(x, y) {\n  var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n  return msw << 16 | lsw & 0xFFFF;\n}\n/*\n * Bitwise rotate a 32-bit number to the left.\n */\n\n\nfunction bit_rol(num, cnt) {\n  return num << cnt | num >>> 32 - cnt;\n}\n\nexports.HMACSHA1 = function (key, data) {\n  return b64_hmac_sha1(key, data);\n};","map":{"version":3,"sources":["/home/jadson/repository/PAINEL/frontend/node_modules/oauth/lib/sha1.js"],"names":["hexcase","b64pad","hex_sha1","s","rstr2hex","rstr_sha1","str2rstr_utf8","b64_sha1","rstr2b64","any_sha1","e","rstr2any","hex_hmac_sha1","k","d","rstr_hmac_sha1","b64_hmac_sha1","any_hmac_sha1","sha1_vm_test","toLowerCase","binb2rstr","binb_sha1","rstr2binb","length","key","data","bkey","ipad","Array","opad","i","hash","concat","input","hex_tab","output","x","charCodeAt","charAt","tab","len","triplet","j","encoding","divisor","remainders","q","quotient","dividend","Math","ceil","floor","full_length","log","y","String","fromCharCode","str2rstr_utf16le","str2rstr_utf16be","w","a","b","c","olda","oldb","oldc","oldd","olde","bit_rol","t","safe_add","sha1_ft","sha1_kt","lsw","msw","num","cnt","exports","HMACSHA1"],"mappings":"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","sourcesContent":["/*\n * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\n * in FIPS 180-1\n * Version 2.2 Copyright Paul Johnston 2000 - 2009.\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for details.\n */\n\n/*\n * Configurable variables. You may need to tweak these to be compatible with\n * the server-side, but the defaults work in most cases.\n */\nvar hexcase = 1;  /* hex output format. 0 - lowercase; 1 - uppercase        */\nvar b64pad  = \"=\"; /* base-64 pad character. \"=\" for strict RFC compliance   */\n\n/*\n * These are the functions you'll usually want to call\n * They take string arguments and return either hex or base-64 encoded strings\n */\nfunction hex_sha1(s)    { return rstr2hex(rstr_sha1(str2rstr_utf8(s))); }\nfunction b64_sha1(s)    { return rstr2b64(rstr_sha1(str2rstr_utf8(s))); }\nfunction any_sha1(s, e) { return rstr2any(rstr_sha1(str2rstr_utf8(s)), e); }\nfunction hex_hmac_sha1(k, d)\n  { return rstr2hex(rstr_hmac_sha1(str2rstr_utf8(k), str2rstr_utf8(d))); }\nfunction b64_hmac_sha1(k, d)\n  { return rstr2b64(rstr_hmac_sha1(str2rstr_utf8(k), str2rstr_utf8(d))); }\nfunction any_hmac_sha1(k, d, e)\n  { return rstr2any(rstr_hmac_sha1(str2rstr_utf8(k), str2rstr_utf8(d)), e); }\n\n/*\n * Perform a simple self-test to see if the VM is working\n */\nfunction sha1_vm_test()\n{\n  return hex_sha1(\"abc\").toLowerCase() == \"a9993e364706816aba3e25717850c26c9cd0d89d\";\n}\n\n/*\n * Calculate the SHA1 of a raw string\n */\nfunction rstr_sha1(s)\n{\n  return binb2rstr(binb_sha1(rstr2binb(s), s.length * 8));\n}\n\n/*\n * Calculate the HMAC-SHA1 of a key and some data (raw strings)\n */\nfunction rstr_hmac_sha1(key, data)\n{\n  var bkey = rstr2binb(key);\n  if(bkey.length > 16) bkey = binb_sha1(bkey, key.length * 8);\n\n  var ipad = Array(16), opad = Array(16);\n  for(var i = 0; i < 16; i++)\n  {\n    ipad[i] = bkey[i] ^ 0x36363636;\n    opad[i] = bkey[i] ^ 0x5C5C5C5C;\n  }\n\n  var hash = binb_sha1(ipad.concat(rstr2binb(data)), 512 + data.length * 8);\n  return binb2rstr(binb_sha1(opad.concat(hash), 512 + 160));\n}\n\n/*\n * Convert a raw string to a hex string\n */\nfunction rstr2hex(input)\n{\n  try { hexcase } catch(e) { hexcase=0; }\n  var hex_tab = hexcase ? \"0123456789ABCDEF\" : \"0123456789abcdef\";\n  var output = \"\";\n  var x;\n  for(var i = 0; i < input.length; i++)\n  {\n    x = input.charCodeAt(i);\n    output += hex_tab.charAt((x >>> 4) & 0x0F)\n           +  hex_tab.charAt( x        & 0x0F);\n  }\n  return output;\n}\n\n/*\n * Convert a raw string to a base-64 string\n */\nfunction rstr2b64(input)\n{\n  try { b64pad } catch(e) { b64pad=''; }\n  var tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n  var output = \"\";\n  var len = input.length;\n  for(var i = 0; i < len; i += 3)\n  {\n    var triplet = (input.charCodeAt(i) << 16)\n                | (i + 1 < len ? input.charCodeAt(i+1) << 8 : 0)\n                | (i + 2 < len ? input.charCodeAt(i+2)      : 0);\n    for(var j = 0; j < 4; j++)\n    {\n      if(i * 8 + j * 6 > input.length * 8) output += b64pad;\n      else output += tab.charAt((triplet >>> 6*(3-j)) & 0x3F);\n    }\n  }\n  return output;\n}\n\n/*\n * Convert a raw string to an arbitrary string encoding\n */\nfunction rstr2any(input, encoding)\n{\n  var divisor = encoding.length;\n  var remainders = Array();\n  var i, q, x, quotient;\n\n  /* Convert to an array of 16-bit big-endian values, forming the dividend */\n  var dividend = Array(Math.ceil(input.length / 2));\n  for(i = 0; i < dividend.length; i++)\n  {\n    dividend[i] = (input.charCodeAt(i * 2) << 8) | input.charCodeAt(i * 2 + 1);\n  }\n\n  /*\n   * Repeatedly perform a long division. The binary array forms the dividend,\n   * the length of the encoding is the divisor. Once computed, the quotient\n   * forms the dividend for the next step. We stop when the dividend is zero.\n   * All remainders are stored for later use.\n   */\n  while(dividend.length > 0)\n  {\n    quotient = Array();\n    x = 0;\n    for(i = 0; i < dividend.length; i++)\n    {\n      x = (x << 16) + dividend[i];\n      q = Math.floor(x / divisor);\n      x -= q * divisor;\n      if(quotient.length > 0 || q > 0)\n        quotient[quotient.length] = q;\n    }\n    remainders[remainders.length] = x;\n    dividend = quotient;\n  }\n\n  /* Convert the remainders to the output string */\n  var output = \"\";\n  for(i = remainders.length - 1; i >= 0; i--)\n    output += encoding.charAt(remainders[i]);\n\n  /* Append leading zero equivalents */\n  var full_length = Math.ceil(input.length * 8 /\n                                    (Math.log(encoding.length) / Math.log(2)))\n  for(i = output.length; i < full_length; i++)\n    output = encoding[0] + output;\n\n  return output;\n}\n\n/*\n * Encode a string as utf-8.\n * For efficiency, this assumes the input is valid utf-16.\n */\nfunction str2rstr_utf8(input)\n{\n  var output = \"\";\n  var i = -1;\n  var x, y;\n\n  while(++i < input.length)\n  {\n    /* Decode utf-16 surrogate pairs */\n    x = input.charCodeAt(i);\n    y = i + 1 < input.length ? input.charCodeAt(i + 1) : 0;\n    if(0xD800 <= x && x <= 0xDBFF && 0xDC00 <= y && y <= 0xDFFF)\n    {\n      x = 0x10000 + ((x & 0x03FF) << 10) + (y & 0x03FF);\n      i++;\n    }\n\n    /* Encode output as utf-8 */\n    if(x <= 0x7F)\n      output += String.fromCharCode(x);\n    else if(x <= 0x7FF)\n      output += String.fromCharCode(0xC0 | ((x >>> 6 ) & 0x1F),\n                                    0x80 | ( x         & 0x3F));\n    else if(x <= 0xFFFF)\n      output += String.fromCharCode(0xE0 | ((x >>> 12) & 0x0F),\n                                    0x80 | ((x >>> 6 ) & 0x3F),\n                                    0x80 | ( x         & 0x3F));\n    else if(x <= 0x1FFFFF)\n      output += String.fromCharCode(0xF0 | ((x >>> 18) & 0x07),\n                                    0x80 | ((x >>> 12) & 0x3F),\n                                    0x80 | ((x >>> 6 ) & 0x3F),\n                                    0x80 | ( x         & 0x3F));\n  }\n  return output;\n}\n\n/*\n * Encode a string as utf-16\n */\nfunction str2rstr_utf16le(input)\n{\n  var output = \"\";\n  for(var i = 0; i < input.length; i++)\n    output += String.fromCharCode( input.charCodeAt(i)        & 0xFF,\n                                  (input.charCodeAt(i) >>> 8) & 0xFF);\n  return output;\n}\n\nfunction str2rstr_utf16be(input)\n{\n  var output = \"\";\n  for(var i = 0; i < input.length; i++)\n    output += String.fromCharCode((input.charCodeAt(i) >>> 8) & 0xFF,\n                                   input.charCodeAt(i)        & 0xFF);\n  return output;\n}\n\n/*\n * Convert a raw string to an array of big-endian words\n * Characters >255 have their high-byte silently ignored.\n */\nfunction rstr2binb(input)\n{\n  var output = Array(input.length >> 2);\n  for(var i = 0; i < output.length; i++)\n    output[i] = 0;\n  for(var i = 0; i < input.length * 8; i += 8)\n    output[i>>5] |= (input.charCodeAt(i / 8) & 0xFF) << (24 - i % 32);\n  return output;\n}\n\n/*\n * Convert an array of big-endian words to a string\n */\nfunction binb2rstr(input)\n{\n  var output = \"\";\n  for(var i = 0; i < input.length * 32; i += 8)\n    output += String.fromCharCode((input[i>>5] >>> (24 - i % 32)) & 0xFF);\n  return output;\n}\n\n/*\n * Calculate the SHA-1 of an array of big-endian words, and a bit length\n */\nfunction binb_sha1(x, len)\n{\n  /* append padding */\n  x[len >> 5] |= 0x80 << (24 - len % 32);\n  x[((len + 64 >> 9) << 4) + 15] = len;\n\n  var w = Array(80);\n  var a =  1732584193;\n  var b = -271733879;\n  var c = -1732584194;\n  var d =  271733878;\n  var e = -1009589776;\n\n  for(var i = 0; i < x.length; i += 16)\n  {\n    var olda = a;\n    var oldb = b;\n    var oldc = c;\n    var oldd = d;\n    var olde = e;\n\n    for(var j = 0; j < 80; j++)\n    {\n      if(j < 16) w[j] = x[i + j];\n      else w[j] = bit_rol(w[j-3] ^ w[j-8] ^ w[j-14] ^ w[j-16], 1);\n      var t = safe_add(safe_add(bit_rol(a, 5), sha1_ft(j, b, c, d)),\n                       safe_add(safe_add(e, w[j]), sha1_kt(j)));\n      e = d;\n      d = c;\n      c = bit_rol(b, 30);\n      b = a;\n      a = t;\n    }\n\n    a = safe_add(a, olda);\n    b = safe_add(b, oldb);\n    c = safe_add(c, oldc);\n    d = safe_add(d, oldd);\n    e = safe_add(e, olde);\n  }\n  return Array(a, b, c, d, e);\n\n}\n\n/*\n * Perform the appropriate triplet combination function for the current\n * iteration\n */\nfunction sha1_ft(t, b, c, d)\n{\n  if(t < 20) return (b & c) | ((~b) & d);\n  if(t < 40) return b ^ c ^ d;\n  if(t < 60) return (b & c) | (b & d) | (c & d);\n  return b ^ c ^ d;\n}\n\n/*\n * Determine the appropriate additive constant for the current iteration\n */\nfunction sha1_kt(t)\n{\n  return (t < 20) ?  1518500249 : (t < 40) ?  1859775393 :\n         (t < 60) ? -1894007588 : -899497514;\n}\n\n/*\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n * to work around bugs in some JS interpreters.\n */\nfunction safe_add(x, y)\n{\n  var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n  return (msw << 16) | (lsw & 0xFFFF);\n}\n\n/*\n * Bitwise rotate a 32-bit number to the left.\n */\nfunction bit_rol(num, cnt)\n{\n  return (num << cnt) | (num >>> (32 - cnt));\n}\n\nexports.HMACSHA1= function(key, data) {\n  return b64_hmac_sha1(key, data);\n}"]},"metadata":{},"sourceType":"script"}