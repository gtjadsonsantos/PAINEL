{"ast":null,"code":"var querystring = require('querystring'),\n    crypto = require('crypto'),\n    https = require('https'),\n    http = require('http'),\n    URL = require('url'),\n    OAuthUtils = require('./_utils');\n\nexports.OAuth2 = function (clientId, clientSecret, baseSite, authorizePath, accessTokenPath, customHeaders) {\n  this._clientId = clientId;\n  this._clientSecret = clientSecret;\n  this._baseSite = baseSite;\n  this._authorizeUrl = authorizePath || \"/oauth/authorize\";\n  this._accessTokenUrl = accessTokenPath || \"/oauth/access_token\";\n  this._accessTokenName = \"access_token\";\n  this._authMethod = \"Bearer\";\n  this._customHeaders = customHeaders || {};\n  this._useAuthorizationHeaderForGET = false; //our agent\n\n  this._agent = undefined;\n}; // Allows you to set an agent to use instead of the default HTTP or\n// HTTPS agents. Useful when dealing with your own certificates.\n\n\nexports.OAuth2.prototype.setAgent = function (agent) {\n  this._agent = agent;\n}; // This 'hack' method is required for sites that don't use\n// 'access_token' as the name of the access token (for requests).\n// ( http://tools.ietf.org/html/draft-ietf-oauth-v2-16#section-7 )\n// it isn't clear what the correct value should be atm, so allowing\n// for specific (temporary?) override for now.\n\n\nexports.OAuth2.prototype.setAccessTokenName = function (name) {\n  this._accessTokenName = name;\n}; // Sets the authorization method for Authorization header.\n// e.g. Authorization: Bearer <token>  # \"Bearer\" is the authorization method.\n\n\nexports.OAuth2.prototype.setAuthMethod = function (authMethod) {\n  this._authMethod = authMethod;\n}; // If you use the OAuth2 exposed 'get' method (and don't construct your own _request call )\n// this will specify whether to use an 'Authorize' header instead of passing the access_token as a query parameter\n\n\nexports.OAuth2.prototype.useAuthorizationHeaderforGET = function (useIt) {\n  this._useAuthorizationHeaderForGET = useIt;\n};\n\nexports.OAuth2.prototype._getAccessTokenUrl = function () {\n  return this._baseSite + this._accessTokenUrl;\n  /* + \"?\" + querystring.stringify(params); */\n}; // Build the authorization header. In particular, build the part after the colon.\n// e.g. Authorization: Bearer <token>  # Build \"Bearer <token>\"\n\n\nexports.OAuth2.prototype.buildAuthHeader = function (token) {\n  return this._authMethod + ' ' + token;\n};\n\nexports.OAuth2.prototype._chooseHttpLibrary = function (parsedUrl) {\n  var http_library = https; // As this is OAUth2, we *assume* https unless told explicitly otherwise.\n\n  if (parsedUrl.protocol != \"https:\") {\n    http_library = http;\n  }\n\n  return http_library;\n};\n\nexports.OAuth2.prototype._request = function (method, url, headers, post_body, access_token, callback) {\n  var parsedUrl = URL.parse(url, true);\n\n  if (parsedUrl.protocol == \"https:\" && !parsedUrl.port) {\n    parsedUrl.port = 443;\n  }\n\n  var http_library = this._chooseHttpLibrary(parsedUrl);\n\n  var realHeaders = {};\n\n  for (var key in this._customHeaders) {\n    realHeaders[key] = this._customHeaders[key];\n  }\n\n  if (headers) {\n    for (var key in headers) {\n      realHeaders[key] = headers[key];\n    }\n  }\n\n  realHeaders['Host'] = parsedUrl.host;\n\n  if (!realHeaders['User-Agent']) {\n    realHeaders['User-Agent'] = 'Node-oauth';\n  }\n\n  if (post_body) {\n    if (Buffer.isBuffer(post_body)) {\n      realHeaders[\"Content-Length\"] = post_body.length;\n    } else {\n      realHeaders[\"Content-Length\"] = Buffer.byteLength(post_body);\n    }\n  } else {\n    realHeaders[\"Content-length\"] = 0;\n  }\n\n  if (access_token && !('Authorization' in realHeaders)) {\n    if (!parsedUrl.query) parsedUrl.query = {};\n    parsedUrl.query[this._accessTokenName] = access_token;\n  }\n\n  var queryStr = querystring.stringify(parsedUrl.query);\n  if (queryStr) queryStr = \"?\" + queryStr;\n  var options = {\n    host: parsedUrl.hostname,\n    port: parsedUrl.port,\n    path: parsedUrl.pathname + queryStr,\n    method: method,\n    headers: realHeaders\n  };\n\n  this._executeRequest(http_library, options, post_body, callback);\n};\n\nexports.OAuth2.prototype._executeRequest = function (http_library, options, post_body, callback) {\n  // Some hosts *cough* google appear to close the connection early / send no content-length header\n  // allow this behaviour.\n  var allowEarlyClose = OAuthUtils.isAnEarlyCloseHost(options.host);\n  var callbackCalled = false;\n\n  function passBackControl(response, result) {\n    if (!callbackCalled) {\n      callbackCalled = true;\n\n      if (!(response.statusCode >= 200 && response.statusCode <= 299) && response.statusCode != 301 && response.statusCode != 302) {\n        callback({\n          statusCode: response.statusCode,\n          data: result\n        });\n      } else {\n        callback(null, result, response);\n      }\n    }\n  }\n\n  var result = \"\"; //set the agent on the request options\n\n  if (this._agent) {\n    options.agent = this._agent;\n  }\n\n  var request = http_library.request(options);\n  request.on('response', function (response) {\n    response.on(\"data\", function (chunk) {\n      result += chunk;\n    });\n    response.on(\"close\", function (err) {\n      if (allowEarlyClose) {\n        passBackControl(response, result);\n      }\n    });\n    response.addListener(\"end\", function () {\n      passBackControl(response, result);\n    });\n  });\n  request.on('error', function (e) {\n    callbackCalled = true;\n    callback(e);\n  });\n\n  if ((options.method == 'POST' || options.method == 'PUT') && post_body) {\n    request.write(post_body);\n  }\n\n  request.end();\n};\n\nexports.OAuth2.prototype.getAuthorizeUrl = function (params) {\n  var params = params || {};\n  params['client_id'] = this._clientId;\n  return this._baseSite + this._authorizeUrl + \"?\" + querystring.stringify(params);\n};\n\nexports.OAuth2.prototype.getOAuthAccessToken = function (code, params, callback) {\n  var params = params || {};\n  params['client_id'] = this._clientId;\n  params['client_secret'] = this._clientSecret;\n  var codeParam = params.grant_type === 'refresh_token' ? 'refresh_token' : 'code';\n  params[codeParam] = code;\n  var post_data = querystring.stringify(params);\n  var post_headers = {\n    'Content-Type': 'application/x-www-form-urlencoded'\n  };\n\n  this._request(\"POST\", this._getAccessTokenUrl(), post_headers, post_data, null, function (error, data, response) {\n    if (error) callback(error);else {\n      var results;\n\n      try {\n        // As of http://tools.ietf.org/html/draft-ietf-oauth-v2-07\n        // responses should be in JSON\n        results = JSON.parse(data);\n      } catch (e) {\n        // .... However both Facebook + Github currently use rev05 of the spec\n        // and neither seem to specify a content-type correctly in their response headers :(\n        // clients of these services will suffer a *minor* performance cost of the exception\n        // being thrown\n        results = querystring.parse(data);\n      }\n\n      var access_token = results[\"access_token\"];\n      var refresh_token = results[\"refresh_token\"];\n      delete results[\"refresh_token\"];\n      callback(null, access_token, refresh_token, results); // callback results =-=\n    }\n  });\n}; // Deprecated\n\n\nexports.OAuth2.prototype.getProtectedResource = function (url, access_token, callback) {\n  this._request(\"GET\", url, {}, \"\", access_token, callback);\n};\n\nexports.OAuth2.prototype.get = function (url, access_token, callback) {\n  if (this._useAuthorizationHeaderForGET) {\n    var headers = {\n      'Authorization': this.buildAuthHeader(access_token)\n    };\n    access_token = null;\n  } else {\n    headers = {};\n  }\n\n  this._request(\"GET\", url, headers, \"\", access_token, callback);\n};","map":{"version":3,"sources":["/home/jadson/Downloads/repositories/PAINEL2/frontend/node_modules/oauth/lib/oauth2.js"],"names":["querystring","require","crypto","https","http","URL","OAuthUtils","exports","OAuth2","clientId","clientSecret","baseSite","authorizePath","accessTokenPath","customHeaders","_clientId","_clientSecret","_baseSite","_authorizeUrl","_accessTokenUrl","_accessTokenName","_authMethod","_customHeaders","_useAuthorizationHeaderForGET","_agent","undefined","prototype","setAgent","agent","setAccessTokenName","name","setAuthMethod","authMethod","useAuthorizationHeaderforGET","useIt","_getAccessTokenUrl","buildAuthHeader","token","_chooseHttpLibrary","parsedUrl","http_library","protocol","_request","method","url","headers","post_body","access_token","callback","parse","port","realHeaders","key","host","Buffer","isBuffer","length","byteLength","query","queryStr","stringify","options","hostname","path","pathname","_executeRequest","allowEarlyClose","isAnEarlyCloseHost","callbackCalled","passBackControl","response","result","statusCode","data","request","on","chunk","err","addListener","e","write","end","getAuthorizeUrl","params","getOAuthAccessToken","code","codeParam","grant_type","post_data","post_headers","error","results","JSON","refresh_token","getProtectedResource","get"],"mappings":"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","sourcesContent":["var querystring= require('querystring'),\n    crypto= require('crypto'),\n    https= require('https'),\n    http= require('http'),\n    URL= require('url'),\n    OAuthUtils= require('./_utils');\n\nexports.OAuth2= function(clientId, clientSecret, baseSite, authorizePath, accessTokenPath, customHeaders) {\n  this._clientId= clientId;\n  this._clientSecret= clientSecret;\n  this._baseSite= baseSite;\n  this._authorizeUrl= authorizePath || \"/oauth/authorize\";\n  this._accessTokenUrl= accessTokenPath || \"/oauth/access_token\";\n  this._accessTokenName= \"access_token\";\n  this._authMethod= \"Bearer\";\n  this._customHeaders = customHeaders || {};\n  this._useAuthorizationHeaderForGET= false;\n\n  //our agent\n  this._agent = undefined;\n};\n\n// Allows you to set an agent to use instead of the default HTTP or\n// HTTPS agents. Useful when dealing with your own certificates.\nexports.OAuth2.prototype.setAgent = function(agent) {\n  this._agent = agent;\n};\n\n// This 'hack' method is required for sites that don't use\n// 'access_token' as the name of the access token (for requests).\n// ( http://tools.ietf.org/html/draft-ietf-oauth-v2-16#section-7 )\n// it isn't clear what the correct value should be atm, so allowing\n// for specific (temporary?) override for now.\nexports.OAuth2.prototype.setAccessTokenName= function ( name ) {\n  this._accessTokenName= name;\n}\n\n// Sets the authorization method for Authorization header.\n// e.g. Authorization: Bearer <token>  # \"Bearer\" is the authorization method.\nexports.OAuth2.prototype.setAuthMethod = function ( authMethod ) {\n  this._authMethod = authMethod;\n};\n\n\n// If you use the OAuth2 exposed 'get' method (and don't construct your own _request call )\n// this will specify whether to use an 'Authorize' header instead of passing the access_token as a query parameter\nexports.OAuth2.prototype.useAuthorizationHeaderforGET = function(useIt) {\n  this._useAuthorizationHeaderForGET= useIt;\n}\n\nexports.OAuth2.prototype._getAccessTokenUrl= function() {\n  return this._baseSite + this._accessTokenUrl; /* + \"?\" + querystring.stringify(params); */\n}\n\n// Build the authorization header. In particular, build the part after the colon.\n// e.g. Authorization: Bearer <token>  # Build \"Bearer <token>\"\nexports.OAuth2.prototype.buildAuthHeader= function(token) {\n  return this._authMethod + ' ' + token;\n};\n\nexports.OAuth2.prototype._chooseHttpLibrary= function( parsedUrl ) {\n  var http_library= https;\n  // As this is OAUth2, we *assume* https unless told explicitly otherwise.\n  if( parsedUrl.protocol != \"https:\" ) {\n    http_library= http;\n  }\n  return http_library;\n};\n\nexports.OAuth2.prototype._request= function(method, url, headers, post_body, access_token, callback) {\n\n  var parsedUrl= URL.parse( url, true );\n  if( parsedUrl.protocol == \"https:\" && !parsedUrl.port ) {\n    parsedUrl.port= 443;\n  }\n\n  var http_library= this._chooseHttpLibrary( parsedUrl );\n\n\n  var realHeaders= {};\n  for( var key in this._customHeaders ) {\n    realHeaders[key]= this._customHeaders[key];\n  }\n  if( headers ) {\n    for(var key in headers) {\n      realHeaders[key] = headers[key];\n    }\n  }\n  realHeaders['Host']= parsedUrl.host;\n\n  if (!realHeaders['User-Agent']) {\n    realHeaders['User-Agent'] = 'Node-oauth';\n  }\n\n  if( post_body ) {\n      if ( Buffer.isBuffer(post_body) ) {\n          realHeaders[\"Content-Length\"]= post_body.length;\n      } else {\n          realHeaders[\"Content-Length\"]= Buffer.byteLength(post_body);\n      }\n  } else {\n      realHeaders[\"Content-length\"]= 0;\n  }\n\n  if( access_token && !('Authorization' in realHeaders)) {\n    if( ! parsedUrl.query ) parsedUrl.query= {};\n    parsedUrl.query[this._accessTokenName]= access_token;\n  }\n\n  var queryStr= querystring.stringify(parsedUrl.query);\n  if( queryStr ) queryStr=  \"?\" + queryStr;\n  var options = {\n    host:parsedUrl.hostname,\n    port: parsedUrl.port,\n    path: parsedUrl.pathname + queryStr,\n    method: method,\n    headers: realHeaders\n  };\n\n  this._executeRequest( http_library, options, post_body, callback );\n}\n\nexports.OAuth2.prototype._executeRequest= function( http_library, options, post_body, callback ) {\n  // Some hosts *cough* google appear to close the connection early / send no content-length header\n  // allow this behaviour.\n  var allowEarlyClose= OAuthUtils.isAnEarlyCloseHost(options.host);\n  var callbackCalled= false;\n  function passBackControl( response, result ) {\n    if(!callbackCalled) {\n      callbackCalled=true;\n      if( !(response.statusCode >= 200 && response.statusCode <= 299) && (response.statusCode != 301) && (response.statusCode != 302) ) {\n        callback({ statusCode: response.statusCode, data: result });\n      } else {\n        callback(null, result, response);\n      }\n    }\n  }\n\n  var result= \"\";\n\n  //set the agent on the request options\n  if (this._agent) {\n    options.agent = this._agent;\n  }\n\n  var request = http_library.request(options);\n  request.on('response', function (response) {\n    response.on(\"data\", function (chunk) {\n      result+= chunk\n    });\n    response.on(\"close\", function (err) {\n      if( allowEarlyClose ) {\n        passBackControl( response, result );\n      }\n    });\n    response.addListener(\"end\", function () {\n      passBackControl( response, result );\n    });\n  });\n  request.on('error', function(e) {\n    callbackCalled= true;\n    callback(e);\n  });\n\n  if( (options.method == 'POST' || options.method == 'PUT') && post_body ) {\n     request.write(post_body);\n  }\n  request.end();\n}\n\nexports.OAuth2.prototype.getAuthorizeUrl= function( params ) {\n  var params= params || {};\n  params['client_id'] = this._clientId;\n  return this._baseSite + this._authorizeUrl + \"?\" + querystring.stringify(params);\n}\n\nexports.OAuth2.prototype.getOAuthAccessToken= function(code, params, callback) {\n  var params= params || {};\n  params['client_id'] = this._clientId;\n  params['client_secret'] = this._clientSecret;\n  var codeParam = (params.grant_type === 'refresh_token') ? 'refresh_token' : 'code';\n  params[codeParam]= code;\n\n  var post_data= querystring.stringify( params );\n  var post_headers= {\n       'Content-Type': 'application/x-www-form-urlencoded'\n   };\n\n\n  this._request(\"POST\", this._getAccessTokenUrl(), post_headers, post_data, null, function(error, data, response) {\n    if( error )  callback(error);\n    else {\n      var results;\n      try {\n        // As of http://tools.ietf.org/html/draft-ietf-oauth-v2-07\n        // responses should be in JSON\n        results= JSON.parse( data );\n      }\n      catch(e) {\n        // .... However both Facebook + Github currently use rev05 of the spec\n        // and neither seem to specify a content-type correctly in their response headers :(\n        // clients of these services will suffer a *minor* performance cost of the exception\n        // being thrown\n        results= querystring.parse( data );\n      }\n      var access_token= results[\"access_token\"];\n      var refresh_token= results[\"refresh_token\"];\n      delete results[\"refresh_token\"];\n      callback(null, access_token, refresh_token, results); // callback results =-=\n    }\n  });\n}\n\n// Deprecated\nexports.OAuth2.prototype.getProtectedResource= function(url, access_token, callback) {\n  this._request(\"GET\", url, {}, \"\", access_token, callback );\n}\n\nexports.OAuth2.prototype.get= function(url, access_token, callback) {\n  if( this._useAuthorizationHeaderForGET ) {\n    var headers= {'Authorization': this.buildAuthHeader(access_token) }\n    access_token= null;\n  }\n  else {\n    headers= {};\n  }\n  this._request(\"GET\", url, headers, \"\", access_token, callback );\n}\n"]},"metadata":{},"sourceType":"script"}